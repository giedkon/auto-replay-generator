{"version":3,"sources":["App.tsx","index.tsx"],"names":["ipcRenderer","window","require","App","useState","status","setStatus","address","setAddress","port","setPort","useEffect","on","e","ip","split","map","Number","n","toString","join","send","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAIQA,EAAgBC,OAAOC,QAAQ,YAA/BF,YAgEOG,MA7Df,WACC,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KA8BA,OA3BAC,qBAAU,WACTL,GAAU,GACVN,EAAYY,GAAG,WAAW,SAACC,EAAQN,GAClCG,EAAQH,EAAQE,MAChBD,EAAWD,EAAQO,GAAGC,MAAM,KAAKC,IAAIC,QAAQD,KAAI,SAAAE,GAAC,OAAIA,EAAEC,SAAS,OAAKC,KAAK,KAAO,IAAMb,EAAQE,KAAKU,SAAS,QAE/GnB,EAAYY,GAAG,aAAa,SAACC,EAAQR,GACpCC,EAAUD,MAEXL,EAAYY,GAAG,UAAU,SAACC,EAAQR,GACjCC,EAAUD,MAEXL,EAAYqB,KAAK,cACjBrB,EAAYqB,KAAK,eACf,IAcF,sBAAKC,UAAU,MAAf,UACC,sBAAKA,UAAU,aAAf,UACC,qBAAKA,UAAU,kBAAf,SACC,qBAAKA,UAAU,YAAf,+CAED,qBAAKC,QAhBS,WAChBvB,EAAYqB,KAAK,QAeSC,UAAU,yBAClC,qBAAKC,QAdS,WAChBvB,EAAYqB,KAAK,QAaSC,UAAU,yBAClC,qBAAKC,QAZM,WACbvB,EAAYqB,KAAK,UAWMC,UAAU,yBAEhC,qBAAKA,UAAU,gBAAf,SACC,iCACC,gEACA,8CAAiBf,EAAjB,KAA2B,sBAAMe,UAAWjB,EAAS,SAAW,UAArC,SAAiDA,EAAS,SAAW,YAAhG,OAECI,EACC,qCACC,2DACA,iEAAyCA,EAAzC,2BAEE,cCtDVe,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.3039d3ec.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\n\n\nconst { ipcRenderer } = window.require('electron');\n\n\nfunction App() {\n\tconst [status, setStatus] = useState(false);\n\tconst [address, setAddress] = useState('');\n\tconst [port, setPort] = useState(0);\n\n\n\tuseEffect(() => {\n\t\tsetStatus(false);\n\t\tipcRenderer.on('address', (e: any, address: { ip: string, port: number }) => {\n\t\t\tsetPort(address.port);\n\t\t\tsetAddress(address.ip.split('.').map(Number).map(n => n.toString(16)).join('-') + \"-\" + address.port.toString(16))\n\t\t});\n\t\tipcRenderer.on('argStatus', (e: any, status: boolean) => {\n\t\t\tsetStatus(status);\n\t\t});\n\t\tipcRenderer.on('status', (e: any, status: boolean) => {\n\t\t\tsetStatus(status);\n\t\t});\n\t\tipcRenderer.send('getAddress');\n\t\tipcRenderer.send('getStatus');\n\t}, [])\n\n\n\tconst minimize = () => {\n\t\tipcRenderer.send('min');\n\t};\n\tconst maximize = () => {\n\t\tipcRenderer.send('max');\n\t};\n\tconst close = () => {\n\t\tipcRenderer.send('close');\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"window-bar\">\n\t\t\t\t<div className=\"window-drag-bar\">\n\t\t\t\t\t<div className=\"title-bar\">Lexogrine Auto Replay Generator</div>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={minimize} className=\"app-control minimize\"></div>\n\t\t\t\t<div onClick={maximize} className=\"app-control maximize\"></div>\n\t\t\t\t<div onClick={close} className=\"app-control close\"></div>\n\t\t\t</div>\n\t\t\t<div className=\"App-container\">\n\t\t\t\t<main>\n\t\t\t\t\t<p>Lexogrine Auto Replay Generator</p>\n\t\t\t\t\t<p>Replayer ID: {address} (<span className={status ? 'online' : 'offline'}>{status ? 'online' : 'offline'}</span>)</p>\n\t\t\t\t\t{\n\t\t\t\t\t\tport ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>Run this command in CS:GO:</p>\n\t\t\t\t\t\t\t\t<code>mirv_pgl url &quot;ws://localhost:{port}&quot;; mirv_pgl start;</code>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : null\n\t\t\t\t\t}\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}